#!/usr/bin/env uvx python@3.13
# pyright: strict
from contextlib import suppress
import sys
from pathlib import Path
from typing import Iterable

IGNORED_DIRS = frozenset(
    {
        "__pycache__",
        ".git",
        ".hypothesis",
        ".mypy_cache",
        ".pytest_cache",
        ".ruff_cache",
        ".venv",
        "node_modules",
    }
)


def path_should_be_scanned(path: Path) -> bool:
    return path.is_dir() and not any(
        path.name == one_ignored_directory for one_ignored_directory in IGNORED_DIRS
    )


def iter_paths_with_ignores(root_path: Path) -> Iterable[Path]:
    if not path_should_be_scanned(root_path):
        return
    yield root_path

    for child_path in root_path.glob("*"):
        if not path_should_be_scanned(child_path):
            continue
        yield child_path
        for grand_child_path in child_path.glob("*"):
            yield from iter_git_repos(grand_child_path)


def iter_git_repos(root_path: Path) -> Iterable[Path]:
    for child_path in iter_paths_with_ignores(root_path):
        with suppress(PermissionError):
            if (child_path / ".git").is_dir():
                yield child_path


root_paths = (
    (Path(one_path) for one_path in sys.argv[1:]) if len(sys.argv) > 1 else (Path("."),)
)

for root_path in root_paths:
    for child_path in iter_git_repos(root_path):
        print(child_path, flush=True)
