#!/usr/bin/env python3.12
# pyright: strict
import enum
import subprocess
import sys
from pathlib import Path


class SyncStatus(enum.Enum):
    synced = "synced"
    sync_failed = "sync failed"
    no_remote_heads = "no remote heads"


def process_directory(repo_dir: Path) -> SyncStatus:
    if (
        subprocess.run(
            [
                "git",
                "-C",
                str(repo_dir),
                "ls-remote",
                "--heads",
                "--quiet",
                "--exit-code",
            ],
            stdout=subprocess.DEVNULL,
        ).returncode
        != 0
    ):
        return SyncStatus.no_remote_heads

    if subprocess.run(["git", "-C", str(repo_dir), "sync"]).returncode == 0:
        return SyncStatus.synced
    return SyncStatus.sync_failed


def main() -> int:
    root_path = Path(sys.argv[1] if len(sys.argv) > 1 else ".")
    results: dict[SyncStatus, list[Path]] = {
        SyncStatus.synced: [],
        SyncStatus.sync_failed: [],
        SyncStatus.no_remote_heads: [],
    }

    for child_path in root_path.rglob("*"):
        if not (child_path.is_dir() and (child_path / ".git").is_dir()):
            continue

        print(f"\033[95m{child_path.relative_to(root_path)}\033[0m")
        status = process_directory(child_path)
        results[status].append(child_path)
        print(f"\033[93m{status.value}\033[0m")
        print()

    for status, paths in results.items():
        if paths:
            print(f"\033[94m{status.value}:\033[0m")
            print("\n".join(str(v.relative_to(root_path)) for v in paths))

    return (
        1
        if results[SyncStatus.sync_failed] or results[SyncStatus.no_remote_heads]
        else 0
    )


if __name__ == "__main__":
    raise SystemExit(main())
