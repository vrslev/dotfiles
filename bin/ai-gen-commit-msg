#!/bin/bash
# post-commit hook for AI-generated commit message

# Check that required environment variables are set
if [ -z "$MAIN_OPENAI_BASE_URL" ] || [ -z "$MAIN_OPENAI_AUTH_TOKEN" ] || [ -z "$MAIN_OPENAI_MODEL" ]; then
  echo "Environment variables not set. Skipping AI commit message generation."
  exit 0
fi
# Check that the commit ID is provided as the first argument
if [ -z "$1" ]; then
  echo "Commit ID not provided as the first argument. Skipping AI commit message generation."
  exit 0
fi

# Prevent reprocessing if the commit message was already updated by this hook.
commit_id="$1"
previous_commit_message=$(git log -1 --pretty=%B "$commit_id")

# Skip if the commit message length is greater than 6 characters
if [ ${#previous_commit_message} -gt 6 ]; then
  echo "$commit_id $previous_commit_message. Commit message is more than 6 characters. Skipping AI generation."
  exit 0
fi

# Get the diff of the given commit
commit_diff=$(git diff-tree --no-commit-id -p -r "$commit_id")

# Limit the commit diff to 32k chars
max_diff_size=$((32 * 1024))
if [ ${#commit_diff} -gt $max_diff_size ]; then
  commit_diff="${commit_diff:0:$max_diff_size}"
  echo "$commit_id: Commit diff exceeds 32k tokens. Truncating diff for AI generation."
fi

# Use jq to properly escape the diff for JSON
commit_diff_json=$(jq -Rs . <<< "$commit_diff")

# Build the JSON payload for the API request.
payload=$(cat <<EOF
{
  "model": "$MAIN_OPENAI_MODEL",
  "messages": [
    {"role": "system", "content": "Generate a concise and descriptive commit message for the git diff. Make sure first character of your answer is a letter. Do not use template words such as 'adjust'. Keep it really short, no more than 50 characters!"},
    {"role": "user", "content": $commit_diff_json}
  ]
}
EOF
)

# Construct the API endpoint URL (assuming the endpoint is under /chat/completions)
api_url="${MAIN_OPENAI_BASE_URL}/chat/completions"

# Send the request to the AI API using curl
response=$(curl -sS -X POST "$api_url" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer ${MAIN_OPENAI_AUTH_TOKEN}" \
  -d "$payload")

# Extract the generated commit message from the response using jq.
ai_commit_message=$(echo "$response" | jq -r '.choices[0].message.content')

# If no valid commit message was returned, exit.
if [ -z "$ai_commit_message" ] || [ "$ai_commit_message" = "null" ]; then
  echo "$commit_id: Skipping update, AI did not return a valid commit message:"
  echo "$response"
  ai_commit_message="Update"
else
  echo "$commit_id: Updated commit message: $ai_commit_message"
fi

# Amend the commit with the new message (using --no-verify to avoid re-triggering hooks)
git commit --amend -m "$ai_commit_message" --no-verify >/dev/null 2>&1
