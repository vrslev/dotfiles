#!/usr/bin/env uvx python@3.13
# pyright: strict

import json
import os
import sys
from pathlib import Path


def pretty_path(path: Path) -> Path:
    return Path("~") / path.relative_to(Path.home())


requested_paths_to_track = [Path(one_path).absolute() for one_path in sys.argv[1:]]
REPO_PATH = Path(os.environ["DOTFILES_ROOT"]).expanduser()
with open(REPO_PATH / "symlinks.json") as f:
    current_config: list[str] = json.load(f)
current_config_paths = [Path(one_path).expanduser() for one_path in current_config]
paths_to_track: list[Path] = []

for one_req_path in requested_paths_to_track:
    if not one_req_path.exists():
        print(f"{pretty_path(one_req_path)} does not exist")
        continue
    if not one_req_path.is_relative_to(Path.home()):
        print(f"{pretty_path(one_req_path)} is not in home directory")
        continue
    if one_req_path in current_config_paths:
        print(f"{pretty_path(one_req_path)} is already tracked")
        continue
    if one_req_path.is_symlink():
        print(
            f"{pretty_path(one_req_path)} is already linked to {pretty_path(Path(os.readlink(one_req_path)))}"
        )
        continue

    for one_tracked_path in current_config_paths:
        if one_req_path.is_relative_to(one_tracked_path):
            print(
                f"{pretty_path(one_req_path)} is already tracked as {pretty_path(one_tracked_path)}"
            )
            break
        elif one_tracked_path.is_relative_to(one_req_path):
            print(
                f"{pretty_path(one_req_path)} contains tracked {pretty_path(one_tracked_path)}, therefore can't be tracked"
            )
            break

    else:
        print(f"tracking {pretty_path(one_req_path)}")
        paths_to_track.append(one_req_path)

new_config = sorted(
    [*current_config, *(str(pretty_path(one_path)) for one_path in paths_to_track)]
)
with open(REPO_PATH / "symlinks.json", "r+") as f:
    f.seek(0)
    json.dump(new_config, f, indent=4)
    f.write("\n")
    f.truncate()

for one_req_path in paths_to_track:
    new_path = REPO_PATH / "home" / one_req_path.relative_to(Path.home())
    new_path.parent.mkdir(parents=True, exist_ok=True)
    one_req_path.replace(new_path)
    one_req_path.symlink_to(new_path)
    print(f"created link: {pretty_path(new_path)} -> {pretty_path(one_req_path)}")
