#!/usr/bin/env python3
# pyright: strict
import json
import os
from pathlib import Path

REPO_PATH = Path(__file__).parent
with open(REPO_PATH / "symlinks.json") as f:
    config: list[str] = json.load(f)
IGNORED_PATHS = {".DS_Store"}
repo_config_paths = {
    one_path
    for one_path in (REPO_PATH / "home").rglob("*")
    if one_path.parts[-1] not in IGNORED_PATHS
}
found_repo_config_paths: set[Path] = set()

for destination in config:
    assert destination.startswith("~/")
    source = "home/" + destination.removeprefix("~/")
    full_source = REPO_PATH / source
    assert full_source.exists()
    full_destination = Path(destination).expanduser()

    if full_destination.is_symlink():
        if full_source != (linked_to := Path(os.readlink(full_destination))):
            print(f"was linked to different target: {destination} -> {linked_to}")
    elif full_destination.exists():
        print(f"already exists: {destination}")
    else:
        full_destination.parent.mkdir(parents=True, exist_ok=True)
        full_destination.symlink_to(full_source)
        print(f"created link: {destination} -> {source}")

    for one_repo_path in repo_config_paths:
        if one_repo_path.is_relative_to(full_source) or full_source.is_relative_to(
            one_repo_path
        ):
            found_repo_config_paths.add(one_repo_path)

if untracked_repo_paths := (repo_config_paths - found_repo_config_paths):
    print("Untracked repo paths:")
    for one_untracked_repo_path in untracked_repo_paths:
        print(one_untracked_repo_path.relative_to(REPO_PATH))
else:
    print("Done!")
